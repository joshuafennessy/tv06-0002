[gcode_macro _globals]
variable_filament_sensor_enabled: 1 # NOTE Enable(1) or disable(0) the filament sensor, if one is connected
variable_beeping_enabled: 0 # NOTE Enable(1) or disable(0) beeping everywhere except during gantry calibration
variable_bed_temp_over: 10 # NOTE Start print if bed temperature is over by this amount, otherwise wait for temperature drop
variable_kamp_enable: 1 # NOTE Enable(1) or disable(0) KAMP (adaptive mesh)
variable_pre_purge_prime_length: 1.40
gcode:
    # Don't delete this section

[gcode_macro PREHEAT_ABS]
gcode:
    ;turn on heaters
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=115
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=175
    SET_FAN_SPEED FAN=airScrubber SPEED=1.0

    ;home
    G28

    ;move to preheat
    G1 X155 Y155 F7800
    G1 Z350 F600

# [gcode_macro M106]
# rename_existing: G106
# gcode:
#     {% if params.S is defined %}
#                 {% if params.S|int == 255 %}
#                     {% set realspeed = 1 %}
#                 {% else %}
#                     {% if params.S|int == 0 %}
#                         {% set realspeed = 0 %}
#                     {% else %}
#                         {% set realspeed = params.S|float/255 %}
#                     {% endif %}
#                 {% endif %}
#         {% else %}
#             {% set realspeed = 1 %}
#         {% endif %}
        
#     {% if params.P is defined %}
#         {% if params.P|int == 2 %}
#             SET_FAN_SPEED FAN=auxFan SPEED={realspeed}
#         {% elif params.P|int == 3 %}
#             SET_FAN_SPEED FAN=airScrubber SPEED={realspeed}
#         {% endif %}            
#     {% else %}
#         {% if params.S is defined %}
#           G106 S{params.S}
#         {% else %}
#           G106 S255
#         {% endif %}
#     {% endif %}

[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E100 F300                    ; load
   G1 E15 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-100 F1800                  ; retract some, but not too much or it will jam
   M82            
   
[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode:
    # Parameters
    {% set NEWSTATUS = params.ENABLE|default(-1)|int %}

    {% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}

    {% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
    {% endif %}

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}

[gcode_macro PRINT_START]
gcode:
    # ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
    # Parameters
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.EXTRUDER|int %}
    #{% set chambertemp = params.CHAMBER|default(0)|int %}
    
    # Other variables
    {% set bedtempSlicer = bedtemp %}
    {% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
    {% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
    {% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
    {% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}

    {% if printer.configfile.settings.safe_z_home %}
        {% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
        {% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
    {% endif %}

    {% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
    {% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
    {% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}

    # If bed-temp-almost is higher than bed-temp by a maximum of bed-temp-over
    {% if bedtempAlmost > bedtemp %}
        {% if (bedtempAlmost - bedtempOver) <= bedtemp %}
            {% set bedtemp = bedtempAlmost %}
        {% endif %}
    {% endif %}

    G90                                                  ; absolute positioning
    M140 S{bedtempAlmost}                                ; set & don't wait for bed temp
    M104 S{hotendtempStepOne}                            ; set & don't wait for hotend temp
    G28 X Y
    {% if printer.configfile.settings.safe_z_home %}
        G1 X{startX} Y{startY} F{maxVelocityAdjusted}
    {% endif %}

    M190 S{bedtempAlmost}                                ; set & wait for bed temp
    {% if kampEnabled == 0 %}
        M104 S{hotendtempStepTwo}                            ; set & don't wait for hotend temp
    {% endif %}
    M190 S{bedtemp}                                      ; set & wait for bed temp
    M140 S{bedtempSlicer}                                ; set & don't wait for bed temp ; set temp to sliced setting regardless

    {% if kampEnabled == 0 %}
        BED_MESH_PROFILE LOAD=default                        ; NOTE if not using a mesh, comment out this line
        M104 S{hotendtemp}                                   ; set & don't wait for hotend temp
        G28 Z                                                ; final z homing
    {% else %}
        G28 Z                                               ; final z homing
        Z_TILT_ADJUST                                       ; ensure level gantry        
        BED_MESH_CALIBRATE                                   ; KAMP mesh
        M104 S{hotendtemp}                                   ; set & don't wait for hotend temp
    {% endif %}

    SMART_PARK                                           ; SMART_PARK using KAMP
    G1 X0 Y0 F{maxVelocityAdjusted}
    M109 S{hotendtemp}                                   ; set & wait for hotend temp

    G1 Z20 F3000                                         ; move nozzle away from bed
    # LINE_PURGE                                              ; purge using KAMP

[gcode_macro PRINT_END]
gcode:
    # ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
    #CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
    {% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}

    M400                                    ; wait for buffer to clear
    G92 E0                                  ; zero the extruder
    G1 E-{PRE_PURGE_PRIME_LENGTH} F400      ; retract filament
    G91                                     ; relative positioning

    #   Set safe speeds
    {% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
    {% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
    {% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
    {% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    #   Check end position to determine safe direction to move

    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    # temp set max_y less to allow for enclosure
    {% set max_y = max_y - 50.0 %}
    # end temp code

    {% set lift_height = 25.0 %}
    {% if printer.toolhead.position.z < (max_z - lift_height) %}
        {% set z_safe = lift_height %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F{zVelocityAdjusted}             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}   ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X60 Y{max_y} F3600          ; park nozzle at rear

    # Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel / 2} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro SENSORLESS_HOME_X]
gcode:
    {% set HOME_CUR = 0.700 %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_x'] %}
    {% set RUN_CUR = driver_config.run_current %}
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P2000
    # Home
    G28 X0
    # Move away
    G90
    G1 X315 F1200
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR}

[gcode_macro SENSORLESS_HOME_Y]
gcode:
    {% set HOME_CUR = 0.700 %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_y'] %}
    {% set RUN_CUR = driver_config.run_current %}
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P2000
    # Home
    G28 Y0
    # Move away
    G90
    G1 Y5 F1200
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR}